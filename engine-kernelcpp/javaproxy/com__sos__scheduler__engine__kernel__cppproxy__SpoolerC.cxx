// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "_precompiled.h"

#include "com__sos__scheduler__engine__kernel__cppproxy__SpoolerC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__DatabaseC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Folder_subsystemC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__HttpResponseC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Job_subsystemC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Lock_subsystemC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Order_subsystemC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Prefix_logC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Process_class_subsystemC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Schedule_subsystemC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__SettingsC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Standing_order_subsystemC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Task_subsystemC.h"
#include "com__sos__scheduler__engine__kernel__cppproxy__Variable_setC.h"
#include "com__sos__scheduler__engine__kernel__http__SchedulerHttpRequest.h"
#include "com__sos__scheduler__engine__kernel__http__SchedulerHttpResponse.h"
#include "java__lang__Object.h"
#include "java__lang__String.h"
#include "java__util__List.h"

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

struct SpoolerC__class : ::zschimmer::javabridge::Class
{
    SpoolerC__class(const string& class_name);
   ~SpoolerC__class();


    static const ::zschimmer::javabridge::class_factory< SpoolerC__class > class_factory;
};

const ::zschimmer::javabridge::class_factory< SpoolerC__class > SpoolerC__class::class_factory ("com.sos.scheduler.engine.kernel.cppproxy.SpoolerC");

SpoolerC__class::SpoolerC__class(const string& class_name) :
    ::zschimmer::javabridge::Class(class_name)
{}

SpoolerC__class::~SpoolerC__class() {}




SpoolerC::SpoolerC(jobject jo) { if (jo) assign_(jo); }

SpoolerC::SpoolerC(const SpoolerC& o) { assign_(o.get_jobject()); }

#ifdef Z_HAS_MOVE_CONSTRUCTOR
    SpoolerC::SpoolerC(SpoolerC&& o) { set_jobject(o.get_jobject());  o.set_jobject(NULL); }
#endif

SpoolerC::~SpoolerC() { assign_(NULL); }





::zschimmer::javabridge::Class* SpoolerC::java_object_class_() const { return _class.get(); }

::zschimmer::javabridge::Class* SpoolerC::java_class_() { return SpoolerC__class::class_factory.clas(); }


void SpoolerC::Lazy_class::initialize() const {
    _value = SpoolerC__class::class_factory.clas();
}


}}}}}}}
