// *** Generated by com.sos.scheduler.engine.cplusplus.generator ***

#include "spooler.h"
#include "../zschimmer/java.h"
#include "../zschimmer/Has_proxy.h"
#include "../zschimmer/javaproxy.h"
#include "../zschimmer/lazy.h"

using namespace ::zschimmer;
using namespace ::zschimmer::javabridge;

namespace zschimmer { namespace javabridge { 

    template<> const class_factory<Proxy_class> has_proxy< ::sos::scheduler::Api_process_configuration >::proxy_class_factory("com.sos.scheduler.engine.kernel.cppproxy.Api_process_configurationCImpl");

}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL _1credentials_1key(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_credentials_key()");
        return env.jstring_from_string(o_->_credentials_key);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jobject JNICALL _1environment(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_environment()");
        return Has_proxy::jobject_of(o_->_environment);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jobject();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jboolean JNICALL _1has_1api(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_has_api()");
        return (o_->_has_api);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jboolean JNICALL _1is_1thread(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_is_thread()");
        return (o_->_is_thread);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL _1java_1classpath(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_java_classpath()");
        return env.jstring_from_string(o_->_java_classpath);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL _1java_1options(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_java_options()");
        return env.jstring_from_string(o_->_java_options);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL _1job_1path(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_job_path()");
        return env.jstring_from_string(o_->_job_path);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jboolean JNICALL _1load_1user_1profile(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_load_user_profile()");
        return (o_->_load_user_profile);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jboolean JNICALL _1log_1stdout_1and_1stderr(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_log_stdout_and_stderr()");
        return (o_->_log_stdout_and_stderr);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jboolean();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL _1priority(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_priority()");
        return env.jstring_from_string(o_->_priority);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL _1remote_1scheduler_1address(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_remote_scheduler_address()");
        return env.jstring_from_string(o_->_remote_scheduler_address);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jint JNICALL _1task_1id(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::_task_id()");
        return (o_->_task_id);
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jint();
    }
}

}}}}}}}

namespace javaproxy { namespace com { namespace sos { namespace scheduler { namespace engine { namespace kernel { namespace cppproxy { 

static jstring JNICALL controllerAddressString(JNIEnv* jenv, jobject, jlong cppReference)
{
    Env env = jenv;
    try {
        ::sos::scheduler::Api_process_configuration* o_ = has_proxy< ::sos::scheduler::Api_process_configuration >::of_cpp_reference(cppReference,"::sos::scheduler::Api_process_configuration::controllerAddressString()");
        return env.jstring_from_string(o_->_controller_address.as_string());
    }
    catch(const exception& x) {
        env.set_java_exception(x);
        return jstring();
    }
}

}}}}}}}

const static JNINativeMethod native_methods[] = {
    { (char*)"_credentials_key__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1credentials_1key },
    { (char*)"_environment__native", (char*)"(J)Lcom/sos/scheduler/engine/kernel/cppproxy/Variable_setC;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1environment },
    { (char*)"_has_api__native", (char*)"(J)Z", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1has_1api },
    { (char*)"_is_thread__native", (char*)"(J)Z", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1is_1thread },
    { (char*)"_java_classpath__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1java_1classpath },
    { (char*)"_java_options__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1java_1options },
    { (char*)"_job_path__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1job_1path },
    { (char*)"_load_user_profile__native", (char*)"(J)Z", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1load_1user_1profile },
    { (char*)"_log_stdout_and_stderr__native", (char*)"(J)Z", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1log_1stdout_1and_1stderr },
    { (char*)"_priority__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1priority },
    { (char*)"_remote_scheduler_address__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1remote_1scheduler_1address },
    { (char*)"_task_id__native", (char*)"(J)I", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::_1task_1id },
    { (char*)"controllerAddressString__native", (char*)"(J)Ljava/lang/String;", (void*)::javaproxy::com::sos::scheduler::engine::kernel::cppproxy::controllerAddressString }
};

namespace zschimmer { namespace javabridge { 

    template<> void has_proxy< ::sos::scheduler::Api_process_configuration >::register_cpp_proxy_class_in_java() {
        Env env;
        Class* cls = has_proxy< ::sos::scheduler::Api_process_configuration >::proxy_class_factory.clas();
        int ret = env->RegisterNatives(*cls, native_methods, sizeof native_methods / sizeof native_methods[0]);
        if (ret < 0)  env.throw_java("RegisterNatives", "com.sos.scheduler.engine.kernel.cppproxy.Api_process_configurationCImpl");
    }

}}
