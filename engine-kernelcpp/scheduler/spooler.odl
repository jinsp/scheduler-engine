// $Id: spooler.odl 14003 2010-09-06 10:30:21Z jz $

// Anweisung: midl /nologo /error all /out $(OutDir) $(InputPath)

[
    uuid        ( feee4780-6c1b-11d8-8103-000476ee8afb ),
    helpstring  ( "SOS GmbH Berlin, www.sos-berlin.com" ),
    lcid        ( 0x0000 ),
    version     ( 1.0 )
]
library Spooler
{
    importlib("STDOLE32.TLB");
    importlib("msxml3.dll");

    import "../zschimmer/java.odl";
  //import "../zschimmer/xslt_stylesheet.odl";

    interface Ivariable_set;
    interface Ilock;
    interface Ilocks;
    interface Ilog;
    interface Itask;
  //interface Ithread;
    interface Imail;
    interface Ijob_chain;
    interface Iorder_queue;
    interface Iorder;
    interface Iprocess_class;
    interface Iprocess_classes;
    interface Ischedule;
    interface Isubprocess;
    interface Isupervisor_client;
    interface Iweb_service;
    interface Iweb_service_operation;
    interface Iweb_service_request;
    interface Iweb_service_response;
    interface Ixslt_stylesheet;

    //------------------------------------------------------------------------------------Log_level

    enum Log_level
    {
        log_debug9 = -9,
        log_debug8 = -8,
        log_debug7 = -7,
        log_debug6 = -6,
        log_debug5 = -5,
        log_debug4 = -4,
        log_debug3 = -3,
        log_debug2 = -2,
        log_debug1 = -1,
        log_debug  = -1,
        log_info   =  0, 
        log_warn   =  1, 
        log_error  =  2,
      //log_fatal  =  3
    };

    //----------------------------------------------------------------------------------------Error

    [
        uuid       ( feee4781-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ierror : IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(0),propget]
        HRESULT                 Is_error                    ( [out,retval] VARIANT_BOOL* Result );

        [id(3),propget]
        HRESULT                 Code                        ( [out,retval] BSTR* Code );

        [id(4),propget]
        HRESULT                 Text                        ( [out,retval] BSTR* Text );
    }

    [
        uuid       ( feee4782-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Error
    {
        interface Ierror;
        interface Ihas_java_class_name;
    }

    //------------------------------------------------------------------------------------Ivariable

    [
        uuid       ( feee4783-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ivariable : IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(0),propput]
        HRESULT                 Value                       ( [in] VARIANT* Value );

        [id(0),propget]
        HRESULT                 Value                       ( [out,retval] VARIANT* Value );

      //HRESULT                 Dim                         ( [in] int size );

        [id(2),propget]
        HRESULT                 Name                        ( [out,retval] BSTR* Name );

        [id(3)]
        HRESULT                 Clone                       ( [out,retval] Ivariable** );
    }

    [
        uuid       ( feee4784-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Variable
    {
        interface Ivariable;
        interface Ihas_java_class_name;
    }

    //---------------------------------------------------------------------------------Variable_set

    [
        uuid       ( feee4785-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ivariable_set : IDispatch
    {
        [id(7),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(1)]
        HRESULT                 Set_var                     ( [in] BSTR Name, [in] VARIANT* Value );

        [id(0),propput]
        HRESULT                 Value                       ( [in,optional] VARIANT* Name, [in] VARIANT* Value );

        [id(0),propget]
        HRESULT                 Value                       ( [in,optional] VARIANT* Name, [out,retval] VARIANT* Value );

        [id(8),propput]
        HRESULT                 Var                         ( [in] BSTR Name, [in] VARIANT* Value );

        [id(8),propget]
        HRESULT                 Var                         ( [in] BSTR Name, [out,retval] VARIANT* Value );

        [id(2),propget]
        HRESULT                 Count                       ( [out,retval] int* Value );

        [id(3),propget]
        HRESULT                 Dom                         ( [out,retval] IXMLDOMDocument** xml_document );

        [id(4)]
        HRESULT                 Clone                       ( [out,retval] Ivariable_set** Result );

        [id(5)]
        HRESULT                 Merge                       ( [in] Ivariable_set* other);

        [id(DISPID_NEWENUM),propget,restricted]
        HRESULT                 _NewEnum                    ( [out,retval] IUnknown** enumerator );    

        [id(6),propput]
        HRESULT                 Xml                         ( [in] BSTR xml_text );

        [id(6),propget]
        HRESULT                 Xml                         ( [out,retval] BSTR* xml_text );

      //[propget]
      //HRESULT                 Names_array                 ( [out,retval] SAFEARRAY(VARIANT)* );

        [id(9),propget]
        HRESULT                 Names                       ( [out,retval] BSTR* );

        [id(10)]
        HRESULT                 Substitute                  ( [in] BSTR, [out,retval] BSTR* );
    }

    [
        uuid       ( feee4786-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Variable_set
    {
        interface Ivariable_set;
        interface Ihas_java_class_name;
    }

    //----------------------------------------------------------------------Variable_set_enumerator

    [
        uuid       ( feee4787-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ivariable_set_enumerator : IEnumVARIANT
    { 
        HRESULT                 Next                    ( unsigned long celt, VARIANT* rgvar, unsigned long* pceltFetched );
        HRESULT                 Skip                    ( unsigned long celt );
        HRESULT                 Reset                   ();
        HRESULT                 Clone                   ( IEnumVARIANT** ppenum );
    }

    [
        uuid       ( feee4788-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Variable_set_enumerator
    {
        interface Ivariable_set_enumerator;
    }

    //------------------------------------------------------------------------------------Irun_time

    [
        uuid       ( feee47ab-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Irun_time: IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(2),propput]
        HRESULT                 Xml                         ( [in] BSTR );

        [id(3),propget]
        HRESULT                 Schedule                    ( [out,retval] Ischedule** );
    }

    //------------------------------------------------------------------------------------Ischedule

    [
        uuid       ( feee47ba-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ischedule : IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(2),propput]
        HRESULT                 Xml                         ( [in] BSTR );

        [id(2),propget]
        HRESULT                 Xml                         ( [out,retval] BSTR* );
    }

    //------------------------------------------------------------------------------------------Job

    [
        uuid       ( feee478a-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ijob : IDispatch
    {
        [id(12),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver
        [id(1)]
        HRESULT                 Start_when_directory_changed( [in] BSTR directory_name, [in,defaultvalue("")] BSTR filename_pattern );

        [id(2)]
        HRESULT                 Clear_when_directory_changed();

        [id(3)]
        HRESULT                 Start                       ( [in,optional] VARIANT* Variables, [out,retval] Itask** );

        [id(5),propget]
        HRESULT                 Include_path                ( [out,retval] BSTR* include_path );

        [id(6),propget]
        HRESULT                 Name                        ( [out,retval] BSTR* Name );

        [id(7)]
        HRESULT                 Wake                        ();

        [id(8),propput]
        HRESULT                 State_text                  ( [in] BSTR state_text );

        [id(9),propget]
        HRESULT                 Title                       ( [out,retval] BSTR* title );

        [id(10),propput]
        HRESULT                 Delay_after_error           ( [in] int error_steps, [in] VARIANT* time );

        [id(11),propget]
        HRESULT                 Order_queue                 ( [out,retval] Iorder_queue** Result );

        [id(13),propput]
        HRESULT                 Delay_order_after_setback   ( [in] int Setback_count, [in] VARIANT* time );

        [id(14),propput]
        HRESULT                 Max_order_setbacks          ( [in] int Setback_count );

        [id(14),propget]
        HRESULT                 Max_order_setbacks          ( [out, retval] int* );

        [id(15)]
        HRESULT                 Clear_delay_after_error     ();

        [id(16)]
        HRESULT                 Remove                      ();

        [id(17)]
        HRESULT                 Execute_command             ( [in] BSTR );                      // F�r Joacim 2006-02-20

        [id(18),propput]                                                                               
        HRESULT                 Machine_resumable           ( [in] VARIANT_BOOL );              // F�r Joacim 2006-06-15

        [id(19),propget]                                                                               
        HRESULT                 Process_class               ( [out,retval] Iprocess_class** );

        [id(20),propget]        
        HRESULT                 Folder_path                 ( [out,retval] BSTR* );

        [id(21),propget]        
        HRESULT                 Configuration_directory     ( [out,retval] BSTR* );

        /* this getter is deprecated - use Max_order_setbacks instead */
        [id(22),propget]
        HRESULT                 Setback_max                 ( [out,retval] int* );

        [id(23),propget]
        HRESULT                 Script_code                 ( [out,retval] BSTR* );
    }

    [
        uuid       ( feee478b-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Job
    {
        interface Ijob;
        interface Ihas_java_class_name;
    }

    //-----------------------------------------------------------------------------------------Task

    [
        uuid       ( feee478c-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Itask : IDispatch
    {
        [id(14),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(2),propput]
        HRESULT                 Error                       ( [in] VARIANT* error_text );       // F�r PerlScript, das einen Fehlertext nicht durchreicht

        [id(2),propget]
        HRESULT                 Error                       ( [out,retval] Ierror** Result );

        [id(3),propget]
        HRESULT                 Job                         ( [out,retval] Ijob** Job );

        [id(4),propget]
        HRESULT                 Params                      ( [out,retval] Ivariable_set** parameters );

        [id(5),propput]
        HRESULT                 Result                      ( [in] VARIANT* Value );

        [id(5),propget]
        HRESULT                 Result                      ( [out,retval] VARIANT* Value );

        [id(6)]
        HRESULT                 Wait_until_terminated       ( [in,defaultvalue(999999999)] double* wait_time, [out,retval] VARIANT_BOOL* ok );

        [id(7),propput]
        HRESULT                 Repeat                      ( [in] double* seconds );

        [id(8)]
        HRESULT                 End                         ();

        [id(9),propput]
        HRESULT                 History_field               ( [in] BSTR Name, [in] VARIANT* Value );

        [id(10),propget]
        HRESULT                 Id                          ( [out,retval] int* Result );

        [id(11),propput]
        HRESULT                 Delay_spooler_process       ( [in] VARIANT* seconds );

        [id(13),propget]
        HRESULT                 Order                       ( [out,retval] Iorder** Result );

        [id(15),propget]
        HRESULT                 Changed_directories         ( [out,retval] BSTR* Result );

        [id(16)]
        HRESULT                 Add_pid                     ( [in] int Pid, [in,optional] VARIANT* Timeout );

        [id(17)]
        HRESULT                 Remove_pid                  ( [in] int Pid );

        [id(18),propget]
        HRESULT                 Stderr_text                 ( [out,retval] BSTR* Result );

        [id(19),propget]
        HRESULT                 Stdout_text                 ( [out,retval] BSTR* Result );

        [id(20)]
        HRESULT                 Create_subprocess           ( [in,optional] VARIANT* program_and_parameters, [out,retval] Isubprocess** );

        // Nur f�r Itask_proxy
        [id(21)]
        HRESULT                 Add_subprocess              ( [in] int Pid, [in] double* timeout, [in] VARIANT_BOOL Ignore_error, [in] VARIANT_BOOL Ignore_signal, 
                                                              [in] VARIANT_BOOL kill_dependants_too, [in,defaultvalue("")] BSTR Title );

        [id(22),propput]
        HRESULT                 Priority_class              ( [in] BSTR );

        [id(22),propget]
        HRESULT                 Priority_class              ( [out,retval] BSTR* );

        [id(23),propget]
        HRESULT                 Step_count                  ( [out,retval] int* );                              // F�r Joacim 2005-04-02

        [id(24),propget]
        HRESULT                 Stderr_path                 ( [out,retval] BSTR* Result );

        [id(25),propget]
        HRESULT                 Stdout_path                 ( [out,retval] BSTR* Result );

        [id(26)]
        HRESULT                 Set_error_code_and_text     ( [in] BSTR Code, [in] BSTR Text );                 // F�r spooler_process_after()

        [id(27),propget]
        HRESULT                 Web_service                 ( [out,retval] Iweb_service** );

        [id(28),propget]
        HRESULT                 Web_service_or_null         ( [out,retval] Iweb_service** );

        [id(29),propput]
        HRESULT                 Priority                    ( [in] int );

        [id(29),propget]
        HRESULT                 Priority                    ( [out,retval] int* );

        [id(30),propput]
        HRESULT                 Exit_code                   ( [in] int );

        [id(30),propget]
        HRESULT                 Exit_code                   ( [out,retval] int* );

        [id(31),propget]
        HRESULT                 Trigger_files               ( [out,retval] BSTR* Result );

        [id(32)]
        HRESULT                 Try_hold_lock               ( [in] BSTR, [out,retval] VARIANT_BOOL* );

        [id(33)]
        HRESULT                 Try_hold_lock_non_exclusive ( [in] BSTR, [out,retval] VARIANT_BOOL* );

        [id(34)]
        HRESULT                 Call_me_again_when_locks_available();

        [id(35),propget]
        HRESULT                 Params_xml                  ( [out,retval] BSTR* );

        [id(35),propput]
        HRESULT                 Params_xml                  ( [in] BSTR );

        [id(36),propget]
        HRESULT                 Order_params_xml            ( [out,retval] BSTR* );

        [id(36),propput]
        HRESULT                 Order_params_xml            ( [in] BSTR );

        [id(37),propget]
        HRESULT                 Agent_url                   ([out,retval] BSTR*);

        //[id(35)]
        //HRESULT                 Try_lock_else_call_me_again ( [in] BSTR, [out,retval] VARIANT_BOOL* );

        //[id(36)]
        //HRESULT                 Try_lock_non_exclusive_else_call_me_again( [in] BSTR, [out,retval] VARIANT_BOOL* );
    }

    [
        uuid       ( feee478d-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Task
    {
        interface Itask;
        interface Ihas_java_class_name;
    }

    //----------------------------------------------------------------------------------Itask_proxy

    [
        uuid       ( feee47a7-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Itask_proxy : IDispatch
    {
        // Ids sollten mit Itask �bereinstimmen!

        [id(20)]
        HRESULT                 Create_subprocess           ( [in,optional] VARIANT* program_and_parameters, [out,retval] Isubprocess** );

        [id(22),propput]
        HRESULT                 Priority_class              ( [in] BSTR );

        [id(22),propget]
        HRESULT                 Priority_class              ( [out,retval] BSTR* );

        [id(18),propget]
        HRESULT                 Stderr_text                 ( [out,retval] BSTR* Result );

        [id(19),propget]
        HRESULT                 Stdout_text                 ( [out,retval] BSTR* Result );

        [id(24),propget]
        HRESULT                 Stderr_path                 ( [out,retval] BSTR* Result );

        [id(25),propget]
        HRESULT                 Stdout_path                 ( [out,retval] BSTR* Result );

        [id(29),propput]
        HRESULT                 Priority                    ( [in] int );

        [id(29),propget]
        HRESULT                 Priority                    ( [out,retval] int* );
    }

    [
        uuid       ( feee47aa-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Task_proxy
    {
        interface Itask_proxy;
    }

    //--------------------------------------------------------------------------------------Spooler

    [
        uuid       ( feee4790-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ispooler : IDispatch
    {
        // Ids sollten mit Itask_proxy �bereinstimmen!

        [id(18),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(1),propget]
        HRESULT                 Log                     ( [out,retval] Ilog** Log );

        [id(2),propget]
        HRESULT                 Id                      ( [out,retval] BSTR* spooler_id );

        [id(3),propget]
        HRESULT                 Param                   ( [out,retval] BSTR* spooler_param );

        [id(4),propget]
        HRESULT                 Script                  ( [out,retval] IDispatch** script_object );

        [id(5),propget]
        HRESULT                 Job                     ( [in] BSTR job_name, [out,retval] Ijob** Job );

        [id(6)]
        HRESULT                 Create_variable_set     ( [out,retval] Ivariable_set** Result );

      //[propput]
      //HRESULT                 Include_path            ( [in] BSTR include_path );

        [id(7),propget]
        HRESULT                 Include_path            ( [out,retval] BSTR* include_path );

        [id(8),propget]
        HRESULT                 Log_dir                 ( [out,retval] BSTR* Directory );

        [id(9)]
        HRESULT                 Let_run_terminate_and_restart();

        [id(10),propget]
        HRESULT                 Variables               ( [out,retval] Ivariable_set** );

        [id(0),propput]
        HRESULT                 Var                     ( [in] BSTR Name, [in] VARIANT* Value );

        [id(0),propget]
        HRESULT                 Var                     ( [in] BSTR Name, [out,retval] VARIANT* Value );

        [id(12),propget]
        HRESULT                 Db_name                 ( [out,retval] BSTR* Filename );

        [id(13)]
        HRESULT                 Create_job_chain        ( [out,retval] Ijob_chain** Result );

        [id(14)]
        HRESULT                 Add_job_chain           ( [in] Ijob_chain* job_chain );

        [id(15),propget]
        HRESULT                 Job_chain               ( [in] BSTR Name, [out,retval] Ijob_chain** Result );

        [id(16)]
        HRESULT                 Create_order            ( [out,retval] Iorder** Result );

        [id(17),propget]
        HRESULT                 Is_service              ( [out,retval] VARIANT_BOOL* Result );

        [id(19),propget]
        HRESULT                 Directory               ( [out,retval] BSTR* work_directory_name );

        [id(20)]
        HRESULT                 Job_chain_exists        ( [in] BSTR Name, [out,retval] VARIANT_BOOL* Result );

        [id(21),propget]
        HRESULT                 Hostname                ( [out,retval] BSTR* Result );

        [id(22)]
        HRESULT                 Abort_immediately       ();

        [id(23)]
        HRESULT                 Abort_immediately_and_restart();

        [id(24),propget]
        HRESULT                 Db_variables_table_name ( [out,retval] BSTR* );

        [id(25),propget]
        HRESULT                 Db_tasks_table_name     ( [out,retval] BSTR* );

        [id(26),propget]
        HRESULT                 Db_orders_table_name    ( [out,retval] BSTR* );

        [id(27),propget]
        HRESULT                 Db_history_table_name   ( [out,retval] BSTR* );

        [id(28),propget]
        HRESULT                 Db_order_history_table_name( [out,retval] BSTR* );

        [id(29),propget]
        HRESULT                 Ini_path                ( [out,retval] BSTR* );

        [id(30)]
        HRESULT                 Execute_xml             ( [in] BSTR, [out,retval] BSTR* );

        [id(31),propget]
        HRESULT                 Tcp_port                ( [out,retval] int* );

        [id(32),propget]
        HRESULT                 Udp_port                ( [out,retval] int* );

        [id(33)]
        HRESULT                 Create_xslt_stylesheet  ( [out,retval] Ixslt_stylesheet** );

        [id(34)]
        HRESULT                 Terminate               ( [in,optional] VARIANT* Timeout_in_seconds,
                                                          [in,optional] VARIANT* restart,
                                                          [in,optional] VARIANT* all_schedulers,
                                                          [in,optional] VARIANT* continue_exclusive_operation );

        [id(35)]
        HRESULT                 Terminate_and_restart   ( [in,optional] VARIANT* Timeout_in_seconds );

        [id(36),propput]
        HRESULT                 Suspend_after_resume    ( [in] VARIANT_BOOL );

        [id(37),propget]        
        HRESULT                 Locks                   ( [out,retval] Ilocks** );

        [id(38),propget]        
        HRESULT                 Process_classes         ( [out,retval] Iprocess_classes** );

        [id(39),propget]        
        HRESULT                 Supervisor_client       ( [out,retval] Isupervisor_client** );

        [id(40),propget]        
        HRESULT                 Configuration_directory ( [out,retval] BSTR* );

        [id(41),propget]        
        HRESULT                 Schedule                ( [in] BSTR, [out,retval] Ischedule** );
    }

    [
        uuid       ( feee4791-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Spooler
    {
        interface Ispooler;
        interface Ihas_java_class_name;
    }

    //--------------------------------------------------------------------------------Spooler_proxy

    [
        uuid       ( feee47b2-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ispooler_proxy : IDispatch
    {
        [id(7),propget]
        HRESULT                 Include_path            ( [out,retval] BSTR* include_path );

        [id(8),propget]
        HRESULT                 Log_dir                 ( [out,retval] BSTR* Directory );

        [id(19),propget]
        HRESULT                 Directory               ( [out,retval] BSTR* work_directory_name );

        [id(29),propget]
        HRESULT                 Ini_path                ( [out,retval] BSTR* );

        [id(33)]
        HRESULT                 Create_xslt_stylesheet  ( [out,retval] Ixslt_stylesheet** );
    }

    [
        uuid       ( feee47b3-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Spooler_proxy
    {
        interface Ispooler;
    }

    //------------------------------------------------------------------------------Spooler_context

    [
        uuid       ( feee4792-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ispooler_context : IDispatch
    {
        [id(1),propget]
        HRESULT                 Log                     ( [out,retval] Idispatch** Log );

        [id(2),propget]
        HRESULT                 Spooler                 ( [out,retval] Idispatch** Spooler );

        [id(4),propget]
        HRESULT                 Job                     ( [out,retval] Idispatch** Job );

        [id(5),propget]
        HRESULT                 Task                    ( [out,retval] Idispatch** task );
    }

    [
        uuid       ( feee4793-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Spooler_context
    {
        interface Ispooler_context;
    }

    //-----------------------------------------------------------------------------------------Mail

    [
        uuid       ( feee4794-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Imail : IDispatch
    {
        [id(15),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

      //[hidden]
      //void                    Init                    ();

        [id(1),propput]
        HRESULT                 To                      ( [in] BSTR receipient );

        [id(1),propget]
        HRESULT                 To                      ( [out,retval] BSTR* receipient );

        [id(2),propput]
        HRESULT                 From                    ( [in] BSTR from );

        [id(2),propget]
        HRESULT                 From                    ( [out,retval] BSTR* from );

      //[propput]
      //HRESULT                 Reply_to                ( [in] BSTR receipient );

        [id(3),propput]
        HRESULT                 Cc                      ( [in] BSTR receipients );

        [id(3),propget]
        HRESULT                 Cc                      ( [out,retval] BSTR* receipients );

        [id(4),propput]
        HRESULT                 Bcc                     ( [in] BSTR receipients );

        [id(4),propget]
        HRESULT                 Bcc                     ( [out,retval] BSTR* receipients );

        [id(5),propput]
        HRESULT                 Subject                 ( [in] BSTR subject );

        [id(5),propget]
        HRESULT                 Subject                 ( [out,retval] BSTR* subject );

        [id(6),propput]
        HRESULT                 Body                    ( [in] BSTR body );

        [id(6),propget]
        HRESULT                 Body                    ( [out,retval] BSTR* body );

        [id(7)]
        HRESULT                 Add_file                ( [in] BSTR real_filename, [in,defaultvalue("")] BSTR mail_filename, [in,defaultvalue("")] BSTR Content_type, [in,defaultvalue("")] BSTR encoding );

        [id(8),propput]
        HRESULT                 Smtp                    ( [in] BSTR hostname );

        [id(8),propget]
        HRESULT                 Smtp                    ( [out,retval] BSTR* host );

        [id(9),propput]
        HRESULT                 Queue_dir               ( [in] BSTR Directory );

        [id(9),propget]
        HRESULT                 Queue_dir               ( [out,retval] BSTR* Directory );

        [id(10)]
        HRESULT                 Add_header_field        ( [in] BSTR field_name, [in] BSTR Value );

        [id(11)]
        HRESULT                 Dequeue                 ( [out,retval] int* count );

      //[hidden]
      //int                     Send                    ();

        [id(12),propget]
        HRESULT                 Dequeue_log             ( [out,retval] BSTR* Text );

        [id(13),propput]
        HRESULT                 Xslt_stylesheet_path    ( [in] BSTR );

        [id(13),propget]
        HRESULT                 Xslt_stylesheet_path    ( [out,retval] BSTR* );

        [id(14),propget]
        HRESULT                 Xslt_stylesheet         ( [out,retval] Ixslt_stylesheet** );
    }

    [
        uuid       ( feee4795-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Mail
    {
        interface Imail;
        interface Ihas_java_class_name;
    }

    //-----------------------------------------------------------------Idirectory_file_order_source

    [
        uuid       ( feee47b4-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Idirectory_file_order_source : IDispatch
    {
        //[propget]
        //HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
    }
    
    //--------------------------------------------------------------------------------Job_chain_node

    [
        uuid       ( feee4796-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ijob_chain_node : IDispatch
    {
        [id(7),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(1),propget]
        HRESULT                 State                   ( [out,retval] VARIANT* Result );

        [id(2),propget]
        HRESULT                 Next_node               ( [out,retval] Ijob_chain_node** Result );

        [id(3),propget]
        HRESULT                 Error_node              ( [out,retval] Ijob_chain_node** Result );

        [id(4),propget]
        HRESULT                 Job                     ( [out,retval] Ijob** Result );

        [id(5),propget]
        HRESULT                 Next_state              ( [out,retval] VARIANT* Result );

        [id(6),propget]
        HRESULT                 Error_state             ( [out,retval] VARIANT* Result );

        [id(8),propput]
        HRESULT                 Action                  ( [in] BSTR );

        [id(8),propget]
        HRESULT                 Action                  ( [out,retval] BSTR* );
    }

    [
        uuid       ( feee4797-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Job_chain_node
    {
        interface Ijob_chain_node;
        interface Ihas_java_class_name;
    }

    //-------------------------------------------------------------------------------------Job_chain

    [
        uuid       ( feee4798-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ijob_chain : IDispatch
    {
        [id(8),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(1),propput]
        HRESULT                 Name                    ( [in] BSTR Name );

        [id(1),propget]
        HRESULT                 Name                    ( [out,retval] BSTR* Result );

        [id(2),propget]
        HRESULT                 Order_count             ( [out,retval] int* Result );

        [id(3)]
        HRESULT                 Add_job                 ( [in]          VARIANT* jobname, 
                                                          [in,optional] VARIANT* input_state,
                                                          [in,optional] VARIANT* output_state,
                                                          [in,optional] VARIANT* Error_state );
        [id(4)]
        HRESULT                 Add_end_state           ( [in] VARIANT* State );

        [id(5)]
        HRESULT                 Add_order               ( [in] VARIANT* order_or_payload, [out,retval] Iorder** Order );

        [id(6),propget]
        HRESULT                 Node                    ( [in] VARIANT* State, [out,retval] Ijob_chain_node** Result );

        [id(7),propget]
        HRESULT                 Order_queue             ( [in] VARIANT* State, [out,retval] Iorder_queue** Result );

        [id(9),propput]
        HRESULT                 Orders_recoverable      ( [in] VARIANT_BOOL );

        [id(9),propget]
        HRESULT                 Orders_recoverable      ( [out,retval] VARIANT_BOOL* );

        [id(10)]
        HRESULT                 Remove_all_pending_orders( [out,retval] int* count );       // F�r Joacim, 2005-02-27 (was fehlt: Werden alle Auftr�ge in DB gel�scht? Wird eine Historie geschieben? 
                                                                                            // Besser mit Orders_recoverable=false!
                                                                                            // Vielleicht besser so:
                                                                                            // Begin_refresh_all_orders()
                                                                                            //    job_chain.add_order(order): Ersetzt Auftrag (nur wenn er h�ngt)
                                                                                            // End_refresh_all_orders() (automatisch bei Jobende)
                                                                                            // Alle nicht anger�hrten Auftr�ge werden entfernt.
        [id(11)]
        HRESULT                 Try_add_order           ( [in] Iorder* order, [out,retval] VARIANT_BOOL* Ok );  // F�r Joacim, 2005-05-28

        [id(12)]
        HRESULT                 Add_or_replace_order    ( [in] Iorder* );

        [id(13)]
        HRESULT                 Remove                  ();
    
        [id(14),propput]
        HRESULT                 Title                   ( [in] BSTR );
    
        [id(14),propget]
        HRESULT                 Title                   ( [out,retval] BSTR* );

        [id(15), propget]
        HRESULT                 Path                    ([out, retval] BSTR*);

        [id(16), propget]
        HRESULT                 States                  ( [out, retval] SAFEARRAY(BSTR)* );
    }

    [
        uuid       ( feee4799-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Job_chain
    {
        interface Ijob_chain;
        interface Ihas_java_class_name;
    }

    //----------------------------------------------------------------------------------Order_queue

    [
        uuid       ( feee479a-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Iorder_queue : IDispatch
    {
        [id(3),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(1),propget]
        HRESULT                 Length                  ( [out,retval] int* Result );

      //[id(2)]
      //HRESULT                 Add_order               ( [in] VARIANT* order_or_payload, [out,retval] Iorder** );
    }

    [
        uuid       ( feee479b-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Order_queue
    {
        interface Iorder_queue;
        interface Ihas_java_class_name;
    }

    //----------------------------------------------------------------------------------------Order

    [
        uuid       ( feee479c-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Iorder : IDispatch
    {
        [id(12),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(1),propput]
        HRESULT                 Id                      ( [in] VARIANT* Value );

        [id(1),propget]
        HRESULT                 Id                      ( [out,retval] VARIANT* Result );

        [id(2),propput]
        HRESULT                 Title                   ( [in] BSTR Value );

        [id(2),propget]
        HRESULT                 Title                   ( [out,retval] BSTR* Result );

        [id(3),propput]
        HRESULT                 Priority                ( [in] int Value );

        [id(3),propget]
        HRESULT                 Priority                ( [out,retval] int* Result );

        [id(4),propget]
        HRESULT                 Job_chain               ( [out,retval] Ijob_chain** Result );

        [id(5),propget]
        HRESULT                 Job_chain_node          ( [out,retval] Ijob_chain_node** Result );

      //[id(6),propput]
      //HRESULT                 Job                     ( [in] VARIANT* job_or_jobname );

      //[id(6),propputref]
      //HRESULT                 Job                     ( [in] Ijob* Job );

      //[id(6),propget]
      //HRESULT                 Job                     ( [out,retval] Ijob** Result );

        [id(7),propput]
        HRESULT                 State                   ( [in] VARIANT* Value );

        [id(7),propget]
        HRESULT                 State                   ( [out,retval] VARIANT* Result );

        [id(8),propput]
        HRESULT                 State_text              ( [in] BSTR Value );

        [id(8),propget]
        HRESULT                 State_text              ( [out,retval] BSTR* Result );

        [id(9),propget]
        HRESULT                 Error                   ( [out,retval] Ierror** Result );

        [id(10),propput]
        HRESULT                 Payload                 ( [in] VARIANT* Value );

        [id(10),propputref]
        HRESULT                 Payload                 ( [in] IUnknown* Value );

        [id(10),propget]
        HRESULT                 Payload                 ( [out,retval] VARIANT* Result );

        [id(11)]
        HRESULT                 Payload_is_type         ( [in] BSTR typenam, [out,retval] VARIANT_BOOL* Result );

        [id(13)]
        HRESULT                 Setback                 ();

        [id(14),propput]
        HRESULT                 At                      ( [in] VARIANT* date_time );                // F�r Joacim, 2005-02-27 (was fehlt: Speichern in Datenbank, aufrufbar im Taskschritt?)

        [id(14),propget]
        HRESULT                 At                      ( [out,retval] DATE* Result );              // F�r Joacim, 2005-02-27

        [id(15),propget]
        HRESULT                 Run_time                ( [out,retval] Irun_time** );

        [id(16)]
        HRESULT                 Remove_from_job_chain   ();

        [id(17),propget]
        HRESULT                 String_next_start_time  ( [out,retval] BSTR* );

        [id(18),propget]
        HRESULT                 Xml                     ( [in,defaultvalue("")] BSTR options, [out,retval] BSTR* );

        [id(19),propget]
        HRESULT                 Web_service             ( [out,retval] Iweb_service** );

        [id(20),propget]
        HRESULT                 Web_service_or_null     ( [out,retval] Iweb_service** );

        [id(21),propget]
        HRESULT                 Web_service_operation   ( [out,retval] Iweb_service_operation** );

        [id(22),propget]
        HRESULT                 Web_service_operation_or_null( [out,retval] Iweb_service_operation** );

        [id(23),propput]
        HRESULT                 Xml_payload             ( [in] BSTR );

        [id(23),propget]
        HRESULT                 Xml_payload             ( [out,retval] BSTR* Result );

        [id(24),propput]
        HRESULT                 Params                  ( [in] Ivariable_set* );

        [id(24),propget]
        HRESULT                 Params                  ( [out,retval] Ivariable_set** );

        [id(25),propput]
        HRESULT                 Suspended               ( [in] VARIANT_BOOL );

        [id(25),propget]
        HRESULT                 Suspended               ( [out,retval] VARIANT_BOOL* );

        [id(26),propget]
        HRESULT                 Log                     ( [out,retval] Ilog** );

        [id(27),propput]
        HRESULT                 End_state               ( [in] VARIANT* Value );

        [id(27),propget]
        HRESULT                 End_state               ( [out,retval] VARIANT* Result );

        [id(28),propget]
        HRESULT                 Setback_count           ( [out,retval] int* );

      //[id(26)]
      //HRESULT                 Start_now               ();

        [id(29), propput]
        HRESULT                 Ignore_max_orders       ( [in] VARIANT_BOOL );

        [id(29), propget]
        HRESULT                 Ignore_max_orders       ( [out, retval] VARIANT_BOOL* );

        [id(30), propget]
        HRESULT                 History_id              ( [out, retval] BSTR* );

        [id(31), propget]
        HRESULT                 Last_error              ( [out, retval] BSTR* );
    }

    [
        uuid       ( feee479d-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Order
    {
        interface Iorder;
        interface Ihas_java_class_name;
    }

    //------------------------------------------------------------------------------------------Log

    [
        uuid       ( feee479e-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ilog : IDispatch
    {
        [id(24),propget]
        HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                    // F�r den Objectserver

        [id(1)]
        HRESULT                 Debug9                  ( [in] BSTR line );

        [id(2)]
        HRESULT                 Debug8                  ( [in] BSTR line );

        [id(3)]
        HRESULT                 Debug7                  ( [in] BSTR line );

        [id(4)]
        HRESULT                 Debug6                  ( [in] BSTR line );

        [id(5)]
        HRESULT                 Debug5                  ( [in] BSTR line );

        [id(6)]
        HRESULT                 Debug4                  ( [in] BSTR line );

        [id(7)]
        HRESULT                 Debug3                  ( [in] BSTR line );

        [id(8)]
        HRESULT                 Debug2                  ( [in] BSTR line );

        [id(9)]
        HRESULT                 Debug1                  ( [in] BSTR line );
        
        [id(10)]
        HRESULT                 Debug                   ( [in] BSTR line );
        
        [id(0)]
        HRESULT                 Info                    ( [in] BSTR line );
        
        [id(11)]
        HRESULT                 Msg                     ( [in] BSTR line );     // Zur Kompatibilit�t, wie info()
        
        [id(12)]
        HRESULT                 Warn                    ( [in] BSTR line );
        
        [id(13)]
        HRESULT                 Error                   ( [in] BSTR line );

        [id(14)]    // Siehe auch Konstante dispid_log_log
        HRESULT                 Log                     ( [in] enum Log_level, [in] BSTR line );

        [id(15),propget]
        HRESULT                 Mail                    ( [out,retval] Imail** mail );

        [id(16),propput]
        HRESULT                 Mail_on_error           ( [in] VARIANT_BOOL mail_on_error );

        [id(16),propget]
        HRESULT                 Mail_on_error           ( [out,retval] VARIANT_BOOL* mail_on_error );

        [id(17),propput]
        HRESULT                 Mail_on_success         ( [in] VARIANT_BOOL mail_on_success );

        [id(17),propget]
        HRESULT                 Mail_on_success         ( [out,retval] VARIANT_BOOL* mail_on_success );

        [id(18),propput]
        HRESULT                 Mail_on_process         ( [in] int Level );

        [id(18),propget]
        HRESULT                 Mail_on_process         ( [out,retval] int* Level );

        [id(19),propput]
        HRESULT                 Level                   ( [in] int Level );

        [id(19),propget]
        HRESULT                 Level                   ( [out,retval] int* Level );

        [id(20),propget]
        HRESULT                 Filename                ( [out,retval] BSTR* Filename );

        [id(21),propput]
        HRESULT                 Collect_within          ( [in] VARIANT* time );

        [id(21),propget]
        HRESULT                 Collect_within          ( [out,retval] double* time );

        [id(22),propput]
        HRESULT                 Collect_max             ( [in] VARIANT* time );

        [id(22),propget]
        HRESULT                 Collect_max             ( [out,retval] double* time );

        [id(23),propput]
        HRESULT                 Mail_it                 ( [in] VARIANT_BOOL mail_it );

        [id(25),propget]
        HRESULT                 Last_error_line         ( [out,retval] BSTR* line );

        [id(26),propget]
        HRESULT                 Last                    ( [in] VARIANT* level, [out,retval] BSTR* );

        [id(27),propput]
        HRESULT                 Mail_on_warning         ( [in] VARIANT_BOOL );

        [id(27),propget]
        HRESULT                 Mail_on_warning         ( [out,retval] VARIANT_BOOL* );

        [id(28)]
        HRESULT                 Start_new_file          ();

        [id(29)]
        HRESULT                 Log_file                ( [in] BSTR Path );

        [id(30),propput]
        HRESULT                 New_filename            ( [in] BSTR Filename );

        [id(30),propget]
        HRESULT                 New_filename            ( [out,retval] BSTR* Filename );
    }

    [
        uuid       ( feee479f-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Log
    {
        interface Ilog;
        interface Ihas_java_class_name;
    }

    //------------------------------------------------------------------------------------------Log
/*
    [
        uuid       ( feee47a0-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ilog_proxy : IDispatch
    {
        [propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver

        HRESULT                 Debug9                  ( [in] BSTR line );
        HRESULT                 Debug8                  ( [in] BSTR line );
        HRESULT                 Debug7                  ( [in] BSTR line );
        HRESULT                 Debug6                  ( [in] BSTR line );
        HRESULT                 Debug5                  ( [in] BSTR line );
        HRESULT                 Debug4                  ( [in] BSTR line );
        HRESULT                 Debug3                  ( [in] BSTR line );
        HRESULT                 Debug2                  ( [in] BSTR line );
        HRESULT                 Debug1                  ( [in] BSTR line );
        
        HRESULT                 Debug                   ( [in] BSTR line );
        
        [id(0)]
        HRESULT                 Info                    ( [in] BSTR line );
        
        HRESULT                 Msg                     ( [in] BSTR line );     // Zur Kompatibilit�t, wie info()
        
        HRESULT                 Warn                    ( [in] BSTR line );
        
        HRESULT                 Error                   ( [in] BSTR line );

        HRESULT                 Log                     ( [in] enum Log_level, [in] BSTR line );

        [propput]
        HRESULT                 Level                   ( [in] int Level );

        [propget]
        HRESULT                 Level                   ( [out,retval] int* Level );

    }

    [
        uuid       ( feee47a1-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Log
    {
        interface Ilog;
        interface Ihas_java_class_name;
    }
*/
    //----------------------------------------------------------------Remote_module_instance_server

    [
        uuid       ( feee47a2-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Iremote_module_instance_server : IDispatch
    {
        [id(1)]
        HRESULT                 Construct               ( [in] SAFEARRAY(VARIANT) parameters, [out,retval] VARIANT_BOOL* Result );

        [id(2)]
        HRESULT                 Add_obj                 ( [in] IDispatch*, [in] BSTR Name );

        [id(3)]
        HRESULT                 Name_exists             ( [in] BSTR Name, [out,retval] VARIANT_BOOL* Result );

        [id(4)]
        HRESULT                 Call                    ( [in] BSTR Name, [out,retval] VARIANT* Result );

        [id(5)]
        HRESULT                 Begin                   ( SAFEARRAY(VARIANT) objects, SAFEARRAY(VARIANT) names, [out,retval] VARIANT* Result );

        [id(6)]
        HRESULT                 End                     ( [in] VARIANT_BOOL succeeded, [out,retval] VARIANT* Result );

        [id(7)]
        HRESULT                 Step                    ( [out,retval] VARIANT* Result );

        [id(8)]
        HRESULT                 Wait_for_subprocesses   ();
    };

    [
        uuid       ( feee47a3-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Remote_module_instance_server
    {
        interface IRemote_module_instance_server;
    }

    //----------------------------------------------------------------------------------Isubprocess

    [
        uuid       ( feee47a8-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Isubprocess : IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver

        [id(2)]
        HRESULT                 Close                   ();

        [id(3)]
        HRESULT                 Start                   ( [in] VARIANT* command_line );         // BSTR oder Array

        [id(4),propput]
        HRESULT                 Priority                ( [in] int );

        [id(4),propget]
        HRESULT                 Priority                ( [out,retval] int* );

        [id(5),propput]
        HRESULT                 Priority_class          ( [in] BSTR );                      

        [id(5),propget]
        HRESULT                 Priority_class          ( [out,retval] BSTR* );             

      //HRESULT                 Raise_priority          ( [in] int, [out,retval] VARIANT_BOOL* );

      //HRESULT                 Lower_priority          ( [in] int, [out,retval] VARIANT_BOOL* );

      //[propput]
      //HRESULT                 With_console_window     ( [in] VARIANT_BOOL );

        [id(6),propget]
        HRESULT                 Pid                     ( [out,retval] int* );

        [id(7),propget]
        HRESULT                 Terminated              ( [out,retval] VARIANT_BOOL* );

        [id(8),propget]
        HRESULT                 Exit_code               ( [out,retval] int* );

      //[propput]
      //HRESULT                 Stdout_path             ( [in] BSTR );

      //[propget]
      //HRESULT                 Stdout_path             ( [out,retval] BSTR* );

      //[propput]
      //HRESULT                 Stderr_path             ( [in] BSTR );

      //[propget]
      //HRESULT                 Stderr_path             ( [out,retval] BSTR* );

        [id(11),propput]
        HRESULT                 Ignore_error            ( [in] VARIANT_BOOL );

        [id(11),propget]
        HRESULT                 Ignore_error            ( [out,retval] VARIANT_BOOL* );

        [id(12),propput]
        HRESULT                 Ignore_signal           ( [in] VARIANT_BOOL );

        [id(12),propget]
        HRESULT                 Ignore_signal           ( [out,retval] VARIANT_BOOL* );

        [id(13),propput]
        HRESULT                 Timeout                 ( [in] double* seconds );

        [propput]
        HRESULT                 Show_window             ( [in] VARIANT* );      // F�r Joacim, 2005-05-17

        [id(14)]
        HRESULT                 Wait_for_termination    ( [in,optional] VARIANT* seconds, [out,retval] VARIANT_BOOL* );       // seconds: VT_DOUBLE oder VT_INT

        [id(15)]
        HRESULT                 Kill                    ( [in,defaultvalue(0)] int signal );

        [id(16),propput]
        HRESULT                 Environment             ( [in] BSTR Name, [in] BSTR Value );

        [id(17),propget]
        HRESULT                 Termination_signal      ( [out,retval] int* );

        [id(18),propput]
        HRESULT                 Own_process_group       ( [in] VARIANT_BOOL );

        [id(18),propget]
        HRESULT                 Own_process_group       ( [out,retval] VARIANT_BOOL* );

        [id(19),propget]
        HRESULT                 Env                     ( [out,retval] Ivariable_set** );
    };

    [
        uuid       ( feee47a9-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Subprocess
    {
        interface Isubprocess;
        interface Ihas_java_class_name;
    }

    //-----------------------------------------------------------------------------Ixslt_stylesheet
    
    [
        uuid       ( feee47ac-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ixslt_stylesheet : IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* );                 // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver
        [id(2)]
        HRESULT                 Close                   ();

        [id(3)]
        HRESULT                 Load_xml                ( [in] BSTR Xml, [out,retval] Ixslt_stylesheet** );

        [id(4)]
        HRESULT                 Load_file               ( [in] BSTR Filename, [out,retval] Ixslt_stylesheet** );

        [id(5)]
        HRESULT                 Apply_xml               ( [in] BSTR Xml, [out,retval] BSTR* );
    };

    /*
    [
        uuid       ( feee47b1-6c1b-11d8-8103-000476ee8afb )
    ]
    coclass Xslt_stylesheet
    {
        interface Ixslt_stylesheet;
        interface Ihas_java_class_name;
    }
    */
    //-----------------------------------------------------------------------Ixslt_stylesheet_proxy
    /*
    [
        uuid       (  ),
        odl,
        dual
    ]
    interface Ixslt_stylesheet_proxy : IDispatch
    {
        [propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* );                 // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver
        HRESULT                 Close                   ();

        HRESULT                 Load_xml                ( [in] BSTR Xml, [out,retval] Ixslt_stylesheet** );

        HRESULT                 Load_file               ( [in] BSTR Filename, [out,retval] Ixslt_stylesheet** );

        HRESULT                 Apply_xml               ( [in] BSTR Xml, [out,retval] BSTR* );

      //HRESULT                 Apply_file              ( [in] BSTR input_filename, [in] BSTR output_filename );
    };
    */
    //---------------------------------------------------------------------------------Iweb_service
    
    [
        uuid       ( feee47ad-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Iweb_service: IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* );                 // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver
        [id(2),propget]
        HRESULT                 Name                    ( [out,retval] BSTR* );

        [id(3),propget]
        HRESULT                 Request_xslt_stylesheet_path( [out,retval] BSTR* );

        [id(4),propget]
        HRESULT                 Response_xslt_stylesheet_path( [out,retval] BSTR* );

        [id(5),propget]
        HRESULT                 Forward_xslt_stylesheet_path( [out,retval] BSTR* );

        [id(6),propget]
        HRESULT                 Params                      ( [out,retval] Ivariable_set** parameters );
    };

    //-----------------------------------------------------------------------Iweb_service_operation
    
    [
        uuid       ( feee47ae-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Iweb_service_operation: IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* );                 // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver
        [id(2),propget]
        HRESULT                 Web_service             ( [out,retval] Iweb_service** );

        [id(3),propget]
        HRESULT                 Request                 ( [out,retval] Iweb_service_request** );

        [id(4),propget]
        HRESULT                 Response                ( [out,retval] Iweb_service_response** );

        [id(5),propget]
        HRESULT                 Peer_ip                 ( [out,retval] BSTR* );

        [id(6),propget]
        HRESULT                 Peer_hostname           ( [out,retval] BSTR* );
    };

    //-------------------------------------------------------------------------Iweb_service_request
    
    [
        uuid       ( feee47af-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Iweb_service_request: IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* );                 // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver
        [id(3),propget]
        HRESULT                 Header                  ( [in] BSTR Name, [out,retval] BSTR* Result );

        [id(4),propget]
        HRESULT                 String_content          ( [out,retval] BSTR* );

        [id(5),propget]
        HRESULT                 Binary_content          ( [out,retval] SAFEARRAY(unsigned char)* );

        [id(6),propget]
        HRESULT                 Url                     ( [out,retval] BSTR* );

        [id(7),propget]
        HRESULT                 Content_type            ( [out,retval] BSTR* );

        [id(8),propget]
        HRESULT                 Charset_name            ( [out,retval] BSTR* );
    };

    //-------------------------------------------------------------------------Iweb_service_request
    
    [
        uuid       ( feee47b0-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Iweb_service_response: IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* );                 // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver
        [id(2),propput]
        HRESULT                 Status_code             ( [in] int );

        [id(3),propput]
        HRESULT                 Header                  ( [in] BSTR Name, [in] BSTR Value );

        [id(3),propget]
        HRESULT                 Header                  ( [in] BSTR Name, [out,retval] BSTR* Result );

        [id(4),propput]
        HRESULT                 String_content          ( [in] BSTR );

        [id(5),propput]
        HRESULT                 Binary_content          ( [in] SAFEARRAY(unsigned char) );
        
        [id(6)]
        HRESULT                 Send                    ();

        [id(7),propput]
        HRESULT                 Content_type            ( [in] BSTR );

        [id(7),propget]
        HRESULT                 Content_type            ( [out,retval] BSTR* );

        [id(8),propput]
        HRESULT                 Charset_name            ( [in] BSTR );

        [id(8),propget]
        HRESULT                 Charset_name            ( [out,retval] BSTR* );
    };

    //---------------------------------------------------------------------------------------Ilocks
    
    [
        uuid       ( feee47b5-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ilocks : IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* );                 // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver
        [id(0),propget]
        HRESULT                 Lock                    ( [in] BSTR, [out,retval] Ilock** );

        [id(2),propget]
        HRESULT                 Lock_or_null            ( [in] BSTR, [out,retval] Ilock** );

        [id(3)]
        HRESULT                 Create_lock             ( [out,retval] Ilock** );

        [id(4)]
        HRESULT                 Add_lock                ( [in] Ilock* );
    };

    //----------------------------------------------------------------------------------------Ilock
    
    [
        uuid       ( feee47b6-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Ilock : IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* );                 // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver
        [id(2),propput]
        HRESULT                 Name                    ( [in] BSTR );

        [id(2),propget]
        HRESULT                 Name                    ( [out,retval] BSTR* );

        [id(3),propput]
        HRESULT                 Max_non_exclusive       ( [in] int );

        [id(3),propget]
        HRESULT                 Max_non_exclusive       ( [out,retval] int* );

        [id(4)]
        HRESULT                 Remove                  ();
    };

    //-----------------------------------------------------------------------------Iprocess_classes
    
    [
        uuid       ( feee47b7-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Iprocess_classes : IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* );                 // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver
        [id(0),propget]
        HRESULT                 Process_class           ( [in] BSTR, [out,retval] Iprocess_class** );

        [id(2),propget]
        HRESULT                 Process_class_or_null   ( [in] BSTR, [out,retval] Iprocess_class** );

        [id(3)]
        HRESULT                 Create_process_class    ( [out,retval] Iprocess_class** );

        [id(4)]
        HRESULT                 Add_process_class       ( [in] Iprocess_class* );
    };

    //-------------------------------------------------------------------------------Iprocess_class
    
    [
        uuid       ( feee47b8-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Iprocess_class : IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* );                 // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver
        [id(2),propput]
        HRESULT                 Name                    ( [in] BSTR );

        [id(2),propget]
        HRESULT                 Name                    ( [out,retval] BSTR* );

        [id(3),propput]
        HRESULT                 Remote_scheduler        ( [in] BSTR );

        [id(3),propget]
        HRESULT                 Remote_scheduler        ( [out,retval] BSTR* );

        [id(4),propput]
        HRESULT                 Max_processes           ( [in] int );

        [id(4),propget]
        HRESULT                 Max_processes           ( [out,retval] int* );

        [id(5)]
        HRESULT                 Remove                  ();
    };

    //---------------------------------------------------------------------------Isupervisor_client
    
    [
        uuid       ( feee47b9-6c1b-11d8-8103-000476ee8afb ),
        odl,
        dual
    ]
    interface Isupervisor_client : IDispatch
    {
        [id(1),propget]
        HRESULT                 Java_class_name         ( [out,retval] BSTR* );                 // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
                                                                                                // F�r den Objectserver
        [id(2),propget]
        HRESULT                 Hostname                ( [out,retval] BSTR* );

        [id(3),propget]
        HRESULT                 Tcp_port                ( [out,retval] int* );
    };

    //----------------------------------------------------------------------------Ischeduler_event2

    //[
    //    uuid       ( feee47bb-6c1b-11d8-8103-000476ee8afb ),
    //    odl,
    //    dual
    //]
    //interface Ischeduler_event2 : IDispatch
    //{
    //    [id(1),propget]
    //    HRESULT                 Java_class_name             ( [out,retval] BSTR* Result );          // Damit java_class_name �ber IDispatch, statt �ber Ihas_java_class_name gerufen werden kann
    //                                                                                                // F�r den Objectserver

    //    [id(2),propget]
    //    HRESULT                 Object                      ( [out,retval] Iorder** Result );

    //    [id(3),propget]
    //    HRESULT                 Code                        ( [out,retval] BSTR* Code );
    //}

};

//-------------------------------------------------------------------------------------------------
/*
Ein paar freie GUIDs:

feee47bb-6c1b-11d8-8103-000476ee8afb
feee47bc-6c1b-11d8-8103-000476ee8afb
feee47bd-6c1b-11d8-8103-000476ee8afb
feee47be-6c1b-11d8-8103-000476ee8afb
feee47bf-6c1b-11d8-8103-000476ee8afb
*/
