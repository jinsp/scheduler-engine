package com.sos.scheduler.engine.tests.scheduler.webserver

import akka.actor.ActorSystem
import com.sos.scheduler.engine.client.web.StandardWebSchedulerClient
import com.sos.scheduler.engine.common.scalautil.Closers.implicits._
import com.sos.scheduler.engine.common.scalautil.FileUtils.implicits._
import com.sos.scheduler.engine.common.scalautil.Futures.implicits.SuccessFuture
import com.sos.scheduler.engine.common.sprayutils.XmlString
import com.sos.scheduler.engine.common.utils.FreeTcpPortFinder.findRandomFreeTcpPorts
import com.sos.scheduler.engine.kernel.scheduler.SchedulerException
import com.sos.scheduler.engine.kernel.settings.CppSettingName.htmlDir
import com.sos.scheduler.engine.test.configuration.TestConfiguration
import com.sos.scheduler.engine.test.scalatest.ScalaSchedulerTest
import com.sos.scheduler.engine.tests.scheduler.webserver.XxeVulnerabilityIT._
import org.junit.runner.RunWith
import org.scalatest.FreeSpec
import org.scalatest.Matchers._
import org.scalatest.junit.JUnitRunner
import scala.concurrent.ExecutionContext
import spray.client.pipelining._

@RunWith(classOf[JUnitRunner])
final class XxeVulnerabilityIT extends FreeSpec with ScalaSchedulerTest {

  private lazy val webDirectory = testDirectory / "config/live"
  private lazy val dtdFilename = "test.dtd"  // Suffix .xml, because only .xml resources are copied
  private lazy val dtdContent = (webDirectory / dtdFilename).contentString

  private lazy val List(tcpPort, httpPort) = findRandomFreeTcpPorts(2)
  protected override lazy val testConfiguration = TestConfiguration(getClass,
    mainArguments = List(s"-tcp-port=$tcpPort", s"-http-port=$httpPort"),
    cppSettings = Map(htmlDir → webDirectory.toString))
  private lazy val rootUri = s"http://127.0.0.1:$httpPort"
  protected lazy val client = new StandardWebSchedulerClient(rootUri).closeWithCloser
  private implicit lazy val actorSystem = ActorSystem("NewWebServicePluginIT") withCloser { _.shutdown() }
  private implicit lazy val executionContext = instance[ExecutionContext]

  "C++ web server" - {
    lazy val dtdUri = s"http://127.0.0.1:$tcpPort/$dtdFilename"

    "DTD is accessible" in {
      assertResult(dtdContent) {
        (sendReceive ~> unmarshal[String]).apply(Get(dtdUri)) await TestTimeout
      }
    }

    addExecuteXmlTest(dtdUri)

    "XXE vulnerability via HTTP" in {
      controller.suppressingTerminateOnError {
        val response = (sendReceive ~> unmarshal[String]).apply(Post(s"http://127.0.0.1:$tcpPort/", evilCommand(dtdUri))) await TestTimeout
        response should include("<ERROR")
        assertExpectedErrorMessage(response)
      }
    }
  }

  "NewWebServicePlugin" - {
    lazy val dtdUri = s"http://127.0.0.1:$httpPort/jobscheduler/joc/$dtdFilename"
    lazy val commandUri = s"http://127.0.0.1:$httpPort/jobscheduler/master/api/command"

    "DTD is accessible" in {
      assertResult(dtdContent) {
        (sendReceive ~> unmarshal[String]).apply(Get(dtdUri)) await TestTimeout
      }
    }

    addExecuteXmlTest(dtdUri)

    "XXE vulnerability via NewWebServicePlugin HTTP" in {
      assertResult(dtdContent) {
        (sendReceive ~> unmarshal[String]).apply(Get(dtdUri)) await TestTimeout
      }
      val responseXml = controller.suppressingTerminateOnError {
        (sendReceive ~> unmarshal[String]).apply(Post(commandUri, XmlString(evilCommand(dtdUri)))) await TestTimeout
      }
      assertExpectedErrorMessage(responseXml)
      responseXml should include ("org.xml.sax.SAXParseException")
      responseXml should include ("Z-JAVA-105")
    }
  }

  private def addExecuteXmlTest(dtdUri: ⇒ String): Unit = {
    "XXE vulnerability via executeXml" in {
      assertExpectedErrorMessage(
        intercept[SchedulerException] {
          controller.suppressingTerminateOnError {
            scheduler executeXml evilCommand(dtdUri)
          }
        }.getMessage)
    }
  }

  private def evilCommand(dtdUri: String) =
   s"""<?xml version="1.0"?>
      |<!DOCTYPE test [
      |  <!ENTITY % one SYSTEM "$dtdUri">
      |    %one;
      |    %two;
      |    %four;
      |  ]>
    """.stripMargin
}

private object XxeVulnerabilityIT {
  def assertExpectedErrorMessage(message: String) =
    assert((message contains "DOCTYPE") && (message contains "http://apache.org/xml/features/disallow-doctype-decl") && (message contains "true"))
    // In english: DOCTYPE is disallowed when the feature "http://apache.org/xml/features/disallow-doctype-decl" set to true
}
